Application Properties

#Add appropriate properties as per the instructions given in Question Paper.
spring.datasource.url=jdbc:mysql://localhost:3306/db_infybankbranch
spring.datasource.username=root
spring.datasource.password=root
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect.MySQL5Dialect
#this property is to make the hibernate naming strategy as per the entity and attribute names
spring.jpa.hibernate.naming.physical.strategy=Org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
server.port=2222
server.servlet.context.path=/InfyBankBranchService
--------------------------------------------------------------------------------------------------------------------------------------------------
package com.infy.infybankbranchservice.dto;
import java.time.LocalTime;
public class BranchDTO {
 private Integer branchcode;
 @NotNull(message="{branch.openingtime.invalid}")
 private LocalTime openingTime;
 @NotNull(message="{branch.closingtime.invalid}")
 private LocalTime closingTime;
 private String ifscCode;
 @NotNull(message="{branch.type.notpresent}")
 @Pattern(regexp="(Retail|Commercial|Overseas)",message ="{branch.type.invalid}")
 private String branchType;
 @NotBlank(message="{branch.address.invalid}")
 private String address;
 @Min(value=100000,message="{branch.pincode.invalid}")
 @Max(value=999999,message="{branch.pincode.invalid}")
 private Long pincode;
 @Min(value=1000000000L,message="{branch.phonenumber.invalid}")
 @Max(value=9999999999L,message="{branch.phonenumber.invalid}")
 private Long phoneNumber;
 private String emailId;
}
--------------------------------------------------------------------------------------------------------------------------------------
package com.infy.infybankbranchservice.dto;
import java.time.LocalTime;
public class BranchUpdateDTO {
 @Min(value=1000, message="{branch.code.invalid}")
 private int branchCode;
 private LocalTime openingTime;
 private LocalTime closingTime;
 @Pattern(regexp="(Retail|Commerial|Overseas)",message="{branch.type.invalid}")
 private String branchType;
 private Long phoneNumber;
}
--------------------------------------------------------------------------------------------------------------------------------------------------------
package com.infy.api;
import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.env.Environment;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import com.infy.exception.InfyBankBranchException;
import com.infy.infybankbranchservice.dto.BranchDTO;
import com.infy.service.CustomerService;
@RestController
@Validated
@RequestMapping
public class BranchAPI {
 @Autowired
 private BranchService branchService;
@PostMapping(value = "/branch",consumes="application/json")
public BranchDTO addBranch(@Valid @RequestBody BranchDTO branchDTO) throws InfyBankBranchException{
 BranchDTO branchDTO2 = branchService.addBranch(branchDTO);
 return branchDTO2;
}
//@GetMapping(value="/branch/{pincode}", produces="application/json"),
@GetMapping(value="/branch/{pincode}")
public List<BranchDTO> locateBranches(@PathVariable
 @Min(value = 100000,message="{branch.pincode.invalid}")
    @Max(value = 999999,message="{branch.pincode.invalid}")
    long pincode ) throws InfyBankBranchException{
 List<BranchDTO> branches = branchService.locateBranches(pincode);
 return branches;
}
@PutMapping(value="/branch",consumes="application/json")
public BranchDTO updateBranch(@Valid @RequestBody BranchUpdateDTO branchUpdateDTO)throws InfyBankBranchException{
BranchDTO branchDTO = branchService.updateBranch(branchUpdateDTO);
return branchDTO;
}
@DeleteMapping(value= "/branch/{branchCode}")
public String deleteBranch(@PathVariable @Min(value = 1000,message = "{branch.code.invalid}")
int branchCode) throws InfyBankBranchException{
 String msg = branchService.deleteBranch(branchCode);
 return msg;
}
}
---------------------------------------------------------------------------------------------------------------------------------------
package com.infy.utility;
import java.util.stream.Collectors;
import org.apache.logging.log4j.Logger;
import org.hibernate.exception.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.env.Environment;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.RestControllerAdvice;
import com.infy.exception.InfyBankBranchException;
@RestControllerAdvice
public class GlobalExceptionHandler {
 private final Logger logger = LoggerFactory.getLogger(this.getClass());
 @Autowired
 private Environment environment;
 @ExceptionHandler(Exception.class)
 public ResponseEntity<ErrorInfo>generalExceptionHandler(Exception ex){
  logger.error(ex.getMessage(),ex);
  ErrorInfo errorInfo = new ErrorInfo();
  errorInfo.setErrorCode(HttpStatus.INTERNAL_SERVER_ERROR.value());
  errorInfo.setErrorMsg(environment.getProperty("General.EXCEPTION_MESSAGE"));
  return new ResponseEntity<>(errorInfo,HttpStatus.INTERNAL_SERVER_ERROR);
 }
     @ExceptionHandler(InfyBankBranchException.class)
     public ResponseEntity<ErrorInfo>infyBankBranchServiceExceptionHandler(InfyBankBranchException ex){
     logger.error(ex.getMessage(),ex);
     ErrorInfo errorInfo = new ErrorInfo();
     errorInfo.setErrorCode(HttpStatus.BAD_REQUEST.value());
     errorInfo.setErrorMsg(environment.getProperty(ex.getMessage()));
     return new ResponseEntity<>(errorInfo,HttpStatus.BAD_REQUEST);
  }
   @ExceptionHandler({MethodArgumentNotValidException.class,ConstraintViolationException.class})
   public ResponseEntity<ErrorInfo> exceptionHandler(Exception ex) {
   logger.error(ex.getMessage(),ex);
   String errorMsg;
   if(ex instanceof MethodArgumentNotValidException) {
    MethodArgumentNotValidException manve = (MethodArgumentNotValidException) ex;
    errorMsg = manve.getBindingResult().getAllErrors().stream().map(x -> x.getMessage())
     .collect(Collectors.joining(", "));
   } else{
 ConstraintViolationException cve = (ConstraintViolationException) ex;
 errorMsg=cve.getConstraintViolations().stream().map(x -> x.getMessage())
  .collect(collectors.joining(","));
   }
}
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
package com.infy.service;
import org.springframework.context.annotation.PropertySource;
 @Service
 @PropertySource("classpath: ValidationMessages.properties")
 public class BranchServiceImpl implements BranchService {
 @Autowired
 private BranchRepository branchRepository;
 @Autowired
 private Environment environment;
 @Override
 public BranchDTO addBranch(BranchDTO branchDTO) throws InfyBankBranchException{
  BranchDetailsValidator.validateTimings(branchDTO.getOpeningTime(),branchDTO.getClosingTime());
  List<BranchEntity> branches = branchRepository.findByAddress(branchDTO.getAddress());
  if(!branches.isEmpty()) {
  throw new InfyBankBranchException("BranchServiceImpl.DUPLICATE_BRANCH");
  }
  List<BranchEntity> branchByPhones = branchRepository.findByPhoneNumber(branchDTO.getPhoneNumber());
  if(!branchByPhones.isEmpty()) {
  throw new InfyBankBranchException("BranchServiceImpl.PHONENUMBER_ALREADY_EXISTS");
  }
  BranchEntity be = BranchDTO.dtoToEntityConverter(branchDTO);
  be.setBranchCode(branchRepository.getMaxBranchCode()+1);
  be.setIfscCode("INFYOOO"+be.getBranchCode());
  be.setEmailId("infybank."+be.getBranchCode()+"@infybank.co.in");
  be.setStatus("ACTIVE");
  branchRepository.save(be);
  branchDTO.setBranchCode(be.getBranchCode());
  branchDTO.setIfscCode(be.getIfscCode());
  branchDTO.setEmailId(be.getEmailId());
  branchDTO.setStatus(be.getStatus());
  return branchDTO;
 }
 }
}
------------------------------------------------------------------------------------------------------------------------------------------------------------------