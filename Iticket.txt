APPLICATION.PROPERTIES
-----------------------
server.port=2222
server.servlet.context-path=/ITicket
---------------------------------------------------------------------------------
package com.infy.dto;
import java.time.LocalDateTime;
import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.Max;
import jakarta.validation.constraints.Min;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Pattern;
public class TicketDTO {
 private Integer ticketNumber;
 @NotNull(message="{ticket.phonenumber.notpresent}")
  @Pattern(regexp="[0-9]\\d{9}",message="{ticket.phonenumber.invalid}")
 private String phoneNumber;
  @NotNull(message="{ticket.emailid.notpresent}")
  @Email(message="{ticket.emailid.invalid}")
  private String emailId;
 private String status;
 private LocalDateTime loggedDateTime;
 @NotNull(message="{ticket.issue.notpresent}")
 @Pattern(regexp="[a-zA-Z]+([ ]?[a-zA-Z]+)*",message="{ticket.issue.invalid}")
 private String issue;
 @NotNull(message="{ticket.raisedby.notpresent}")
 @Min(value=100, message="{ticket.raisedby.invalid}")
 @Max(value=999, message="{ticket.raisedby.invalid}")
 private Integer raisedBy;
 @NotNull(message="{ticket.category.notpresent}")
 @Pattern(regexp="(ccd|cag|facility)",message="{ticket.category.invalid}")
 private String category;
 public Integer getTicketNumber() {
 return ticketNumber;
 }
 public void setTicketNumber(Integer ticketNumber) {
 this.ticketNumber = ticketNumber;
 }
 public String getPhoneNumber() {
 return phoneNumber;
 }
 public void setPhoneNumber(String phoneNumber) {
 this.phoneNumber = phoneNumber;
 }
 public String getEmailId() {
 return emailId;
 }
 public void setEmailId(String emailId) {
 this.emailId = emailId;
 }
 public String getStatus() {
 return status;
 }
 public void setStatus(String status) {
 this.status = status;
 }
 public LocalDateTime getLoggedDateTime() {
 return loggedDateTime;
 }
 public void setLoggedDateTime(LocalDateTime loggedDateTime) {
 this.loggedDateTime = loggedDateTime;
 }
 public String getIssue() {
 return issue;
 }
 public void setIssue(String issue) {
 this.issue = issue;
 }
 public Integer getRaisedBy() {
 return raisedBy;
 }
 public void setRaisedBy(Integer raisedBy) {
 this.raisedBy = raisedBy;
 }
 public String getCategory() {
 return category;
 }
 public void setCategory(String category) {
 this.category = category;
 }
}
----------------------------------------------------------------------------------------------
ExceptionControllerAdvice.java
package com.infy.utility;
import java.time.LocalDateTime;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.env.Environment;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.RestControllerAdvice;
import com.infy.exception.ProductNotFoundExecption;
import jakarta.validation.ConstraintViolationException;
@RestControllerAdvice
public class ExceptionControllerAdvice {
 @Autowired
 Environment environment;
 @ExceptionHandler(Exception.class)
 public ResponseEntity<ErrorInfo> generalExceptionHandler(Exception exception) {
 logger.error(exception.getMessage(),exception);
 ErrorInfo errorInfo = new ErrorInfo();
 errorInfo.setErrorMessage(environment.getProperty(TicketConstants.General.EXCEPTION_MESSAGE.toString()));
 errorInfo.setErrorCode(HttpStatus.INTERNAL_SERVER_ERROR.value());
 return new ResponseEntity<>(errorInfo, HttpStatus.INTERNAL_SERVER_ERROR);
 }
 @ExceptionHandler(TicketException.class)
 public ResponseEntity<ErrorInfo> TicketExceptionHandler(TicketException exception) {
 logger.error(exception.getMessage(),exception);
 ErrorInfo errorInfo = new ErrorInfo();
 errorInfo.setErrorMessage(environment.getProperty(exception.getMessage()));
 errorInfo.setErrorCode(HttpStatus.BAD_REQUEST.value());
 return new ResponseEntity<>(errorInfo, HttpStatus.BAD_REQUEST);
 }
 @ExceptionHandler({MethodArgumentNotValidException.class, ConstraintViolationException.class})
}
------------------------------------------------------------------------------------------------------
SERVICEIMPL;-
-----------
package com.infy.service;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.PropertySource;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Service;
import org.springframework.web.bind.annotation.PathVariable;
import com.infy.dto.ProductDTO;
import com.infy.entity.Product;
import com.infy.exception.CookPickException;
import com.infy.exception.ProductNotFoundExecption;
import com.infy.repository.CookPickRepository;
import jakarta.transaction.Transactional;
@Service
@Transactional
@PropertySource("classpath:ValidationMessages.properties")
public class TicketServiceImpl implements TicketService {
 @Autowired
 TicketRepository ticketRepository;
 @Override
 public TicketDTO raiseTicket(TicketDTO ticketDTO) throws TicketException {
 Ticket ticket=TicketDTO.prepareEntity(ticketDTO);
 ticket.setStatus("OPEN");
 ticket.setLoggedDateTime(LocalDateTime.now());
 ticket=ticketRepository.saveAndFlush(ticket);
 return TicketDTO.prepareDTO(ticket);
 }
 @Override
 public TicketDTO searchTicket ( Integer ticketNumber)throws TicketException {
 Optional<Ticket>ticketRetOpt=ticketRepository.findById(ticketNumber);
 if(ticketRetOpt.isPresent()) {
  Ticket ticketReturned =ticketRetOpt.get();
  return TicketDTO.prepareDTO(ticketReturned);
  }
 throw new TicketException(TicketConstants.TICKET_NOT_FOUND.toString());
 }
}
 @Override
 public TicketDTO closeTicket(Integer ticketNumber) throws TicketException {
 Optional<Ticket> optional=ticketRepository.findById(ticketNumber);
 if(optional.isPresent()) {
  Ticket ticket=optional.get();
  if(ticket.getStatus().equals("OPEN"))
  {
  ticket.setStatus("CLOSED");
  ticketRepository.save(ticket);
  return TicketDTO.prepareDTO(ticket);
 }
  else
  {
  throw new TicketException(TicketConstants.TICKET_ALREADY_CLOSED.toString());
  }
 }
 else {
  throw new TicketException(TicketConstants.TICKET_NOT_FOUND.toString());
 }
 }
 @Override
 public List<TicketDTO> getReport(String emailId) throws TicketException {
 List<Ticket> ticketList=ticketRepository.findbyEmailId(emailId);
 if(!ticketList.isEmpty())
 {
  List<TicketDTO> ticketDTOList=new ArrayList<>();
  for(Ticket ticket: ticketList())
  {
  ticketDTOList.add(TicketDTO.prepareDTO(ticket));
  }
 return ticketDTOList;
 }
 }
---------------------------------------------------------------------------------------------
package com.infy.api;
import java.util.ArrayList;
import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.env.Environment;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.infy.dto.TicketDTO;
import com.infy.entity.Product;
import com.infy.exception.CookPickException;
import com.infy.exception.ProductNotFoundExecption;
import com.infy.service.TicketService;
import jakarta.validation.constraints.NotNull;
@RestController
@Validated
public class TicketController {
 @Autowired
 private TicketService cookPickService;
 @PostMapping(value="/ticket")
 public ResponseEntity<TicketDTO> raiseTicket(@Valid @RequestBody TicketDTO ticketDTO) throws TicketException{
 TicketDTO dto=ticketService.raiseTicket(ticketDTO);
 return new ResponseEntity<TicketDTO>(dto, HttpStatus.CREATED);
 }
 @GetMapping(value="/ticket/{ticketNumber}")
 public ResponseEntity<TicketDTO> searchTicket(@PathVariable @Min(value=1000, message="{ticket.ticketnumber>invalid}") @Max(value=9999, message="{ticket.ticketnumber.invalid}")Integer ticketNumber)throws TicketException{
  return new ResponseEntity<>(ticketService.searchTicket(ticketNumber),HttpStatus.OK);
 }
 @PutMapping(value="/ticket/{ticketNumber}")
 public ResponseEntity<TicketDTO> closeTicket(@PathVariable @Min(value=1000, message="{ticket.ticketnumber.invalid}") @Max(value=9999, message="{ticket.ticketnumber.invalid}") Integer ticketNumber)throws TicketException{
 return new ResponseEntity<> (ticketService.closeTicket(ticketNumber), HttpStatus.OK);
 }
 @GetMapping(value="/ticket")
 public ResponeEntity<List<TicketDTO>> getReport(@RequestParam @NotNull(message= "{ticket.emailid.notpresent}") @Email(message="{ticket.emailid.invalid}") String emailId)throws TicketException{
 return new ResponseEntity<>(ticketService.getReport(emailId),HttpStatus.OK);
 }
 @GetMapping("ticket")
//	public ResponseEntity<List<TicketDTO>> getReport(@RequestParam("emailId") String emailId) throws TicketException
//	{
// List<TicketDTO> dto=ticketService.getReport(emailId);
// return new ResponseEntity<List<TicketDTO>>(dto, HttpStatus.OK);
//	}
}
-------------------------------------------------
