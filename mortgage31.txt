CustomerDTO ::
package com.infosys.mortgage.dto;

import javax.validation.constraints.Email;
 
import javax.validation.constraints.Max;
 
import javax.validation.constraints.Min;
 
import javax.validation.constraints.NotNull;
 
import javax.validation.constraints.Pattern;
import com.infosys.mortgage.entity.Customer;

public class CustomerDTO {
 
 @NotNull(message="{Cutsomer_pan_null}")
 
 @Pattern(regexp="[A-Z]{5}[0-9]{4}[A-Z]{1}", message = "{Customer_pan_invalid}")
 
 private String panNumber;
 
 private String name;
 
 @NotNull(message="{Customer_phone_null}")
 
 @Pattern(regexp="(6|7|8|9)[0-9]{9}", message="{Customer_phone_invalid}")
 
 private String phone;
 
 @Email
 
 @NotNull(message="{Customer_email_invalid}")
 
 private String email;
 
 @NotNull(message="{Customer_salary_null}")
 
 private Double monthlyIncome;
 
 private String gender;
 
 private Integer age;
 
 
 @NotNull(message="{Customer_creditScore_null}")
 
 @Min(value=300, message="{Customer_Credit_invalid}")
 
 @Max(value=900, message="{Customer_Credit_invalid}")
 
 private Integer creditScore;
 
//	private List<Loan>loans;
 


  public String getPanNumber() {
 
 return panNumber;
 
 }

 public void setPanNumber(String panNumber) {
 
 this.panNumber = panNumber;
 
 }

 public String getName() {
 
 return name;
 
 }

 public void setName(String name) {
 
 this.name = name;
 
 }

 public String getPhone() {
 
 return phone;
 
 }

 public void setPhone(String phone) {
 
 this.phone = phone;
 
 }

 public String getEmail() {
 
 return email;
 
 }

 public void setEmail(String email) {
 
 this.email = email;
 
 }

 public Double getMonthlyIncome() {
 
 return monthlyIncome;
 
 }

 public void setMonthlyIncome(Double monthlyIncome) {
 
 this.monthlyIncome = monthlyIncome;
 
 }

 public String getGender() {
 
 return gender;
 
 }

 public void setGender(String gender) {
 
 this.gender = gender;
 
 }

 public Integer getAge() {
 
 return age;
 
 }

 public void setAge(Integer age) {
 
 this.age = age;
 
 }

 public Integer getCreditScore() {
 
 return creditScore;
 
 }

 public void setCreditScore(Integer creditScore) {
 
 this.creditScore = creditScore;
 
 }

 public static Customer prepareEntity(CustomerDTO customerDTO) {
 
   Customer customer = new Customer();
 
   customer.setPanNumber(customerDTO.getPanNumber());
 
   customer.setName(customerDTO.getName());
 
   customer.setAge(customerDTO.getAge());
 
   customer.setEmail(customerDTO.getEmail());
 
   customer.setGender(customerDTO.getGender());
 
   return customer;
 
  }
 
}
 
---------------------
LoanDTO
package com.infosys.mortgage.dto;

import javax.validation.constraints.NotNull;
 
import javax.validation.constraints.Pattern;
import com.infosys.mortgage.entity.Loan;
 
import com.infosys.mortgage.entity.LoanStatus;

public class LoanDTO {

 
 private int loanId;
 
  private String loanPurpose;
 
  @NotNull(message="{Customer_pan_null}")
 
 @Pattern(regexp="[A-Z]{5}[0-9]{4}[A-Z]{1}", message="{Customer_pan_invalid}")
 
 private String panNumber;
 
 private Double requiredAmount;
 

 private int loanTenure;
 

 @NotNull(message="{Loan_property_Null}")
 
 private PropertyDTO property;
 
 
 private Double loanAmount;
 
 private Double emi;
 private LoanStatus status;

 public Double getEmi() {
 
 return emi;
 
 }
 
 public void setEmi(Double emi) {
 
 this.emi = emi;
 
 }
 
 public String getPanNumber() {
 
 return panNumber;
 
 }
 public void setPanNumber(String panNumber) {
 
 this.panNumber = panNumber;
 
 }
 public int getLoanTenure() {
 
 return loanTenure;
 
 }
 public void setLoanTenure(int loanTenure) {
 
 this.loanTenure = loanTenure;
 
 }
 public void setStatus(LoanStatus status) {
 
 this.status = status;
 
 }
 public int getLoanId() {
 
 return loanId;
 
 }
 public void setLoanId(int loanId) {
 
 this.loanId = loanId;
 
 }
 public String getLoanPurpose() {
 
 return loanPurpose;
 
 }
 public void setLoanPurpose(String loanPurpose) {
 
 this.loanPurpose = loanPurpose;
 
 }

 public PropertyDTO getProperty() {
 
 return property;
 
 }
 public void setProperty(PropertyDTO property) {
 
 this.property = property;
 
 }
 public Double getLoanAmount() {
 
 return loanAmount;
 
 }
 public void setLoanAmount(Double loanAmount) {
 
 this.loanAmount = loanAmount;
 
 }
 public LoanStatus getStatus() {
 
 return status;
 
 }
 public Double getRequiredAmount() {
 
 return requiredAmount;
 
 }
 public void setRequiredAmount(Double requiredAmount) {
 
 this.requiredAmount = requiredAmount;
 
 }
 @Override
 
 public String toString() {
 
 return "LoanDTO [loanId=" + loanId + ", loanPurpose=" + loanPurpose + ", panNumber=" + panNumber
 
  + ", requiredAmount=" + requiredAmount + ", loanTenure=" + loanTenure + ", property=" + property
 
  + ", loanAmount=" + loanAmount + ", status=" + status + "]";
 
 }
 public static Loan prepareEntity(LoanDTO loanDTO) {
 
 Loan loan = new Loan();
 
 loan.setLoanId(loanDTO.getLoanId());
 
 loan.setLoanPurpose(loanDTO.getLoanPurpose());
 
 loan.setLoanTenure(loanDTO.getLoanTenure());
 
 loan.setRequiredAmount(loan.getRequiredAmount());
 
 return loan;
 
 }
 
 
}
 
---------------------
CustomerServiceIMPL
package com.infosys.mortgage.service;
import java.util.ArrayList;
 
import java.util.List;
 
import java.util.Optional;
import javax.transaction.Transactional;
import org.springframework.beans.factory.annotation.Autowired;
 
import org.springframework.stereotype.Service;
import com.infosys.mortgage.dto.CustomerDTO;
 
import com.infosys.mortgage.dto.LoanDTO;
import com.infosys.mortgage.entity.Customer;
 
import com.infosys.mortgage.entity.Loan;
 
import com.infosys.mortgage.exception.MortgageException;
 
import com.infosys.mortgage.repository.CustomerRepository;
 
import com.infosys.mortgage.repository.LoanRepository;
@Service
 
@Transactional
 
public class CustomerServiceImpl implements CustomerService {
 @Autowired
 
 private CustomerRepository customerRepo;
 @Autowired
 
 private LoanRepository loanRepository;
 @Override
 
 public String customerRegistration(CustomerDTO customerDTO) {
 Customer customer = CustomerDTO.prepareEntity(customerDTO);
 
 customerRepo.saveAndFlush(customer);
 
 return customer.getPanNumber();
 
 }
 @Override
 
 public List<LoanDTO> fetchAllLoansForCustomer(String panNumber) throws MortgageException {
 
 Optional<Customer> opCustomer = customerRepo.findById(panNumber);
 
 Customer customer = opCustomer.orElseThrow(() -> new MortgageException("Service_CustomerNotFound"));
 
 List<Loan> loanList = loanRepository.findLoanByCustomerPanNumber(panNumber);
 
 if (loanList.isEmpty()) {
 
  throw new MortgageException("Service_No_Loan");
 }
 
 List<LoanDTO> loanDtoList = new ArrayList<>();
 
 for (Loan loan : loanList) {
 
  loanDtoList.add(Loan.prepareDTO(loan));
 
 }
 
 return loanDtoList;
 
 }
}
 
-------------------------
LoanServiceIMPL
package com.infosys.mortgage.service;
import java.util.List;
 
import java.util.Optional;
import javax.transaction.Transactional;
import org.springframework.beans.factory.annotation.Autowired;
 
import org.springframework.context.annotation.PropertySource;
import com.infosys.mortgage.dto.LoanDTO;
 
import com.infosys.mortgage.dto.PropertyDTO;
 
import com.infosys.mortgage.entity.Customer;
 
import com.infosys.mortgage.entity.Loan;
import com.infosys.mortgage.entity.LoanStatus;
 
import com.infosys.mortgage.entity.Property;
 
import com.infosys.mortgage.exception.MortgageException;
 
import com.infosys.mortgage.repository.CustomerRepository;
 
import com.infosys.mortgage.repository.LoanRepository;
 
import com.infosys.mortgage.repository.PropertyRepository;
import org.springframework.stereotype.Service;
@Service
 
@Transactional
 
public class LoanApplicationServiceImpl implements LoanApplicationService {
 @Autowired
 
 private LoanRepository loanRepository;
 @Autowired
 
 private PropertyRepository propertyRepository;
 @Autowired
 
 private CustomerRepository customerRepository;
 @Override
 
 public Integer applyLoan(LoanDTO loanDTO) throws MortgageException {
 
 Optional<Customer> opCustomer = customerRepository.findById(loanDTO.getPanNumber());
 
 Customer customer = opCustomer.orElseThrow(() -> new MortgageException("Service_CustomerNotFound"));
 
 Optional<Property> opProperty = propertyRepository.findById(loanDTO.getProperty().getPropertyNumber());
 
 Property property = opProperty.orElseThrow(() -> new MortgageException("Service_Property_Used"));
 
 Loan loan = loanDTO.prepareEntity(loanDTO);
 
 loan.setEmi(0.0);
 
 Loan savedLoan = loanRepository.save(loan);
 
 return savedLoan.getLoanId();
 
 }
 @Override
 
 public Loan loanEvaluation(Integer loanId, Double estimatedValue) throws MortgageException {
 
 Optional<Loan> opLoan = loanRepository.findById(loanId);
 
 Loan loan = opLoan.orElseThrow(() -> new MortgageException("Service_LOAN_DOES_NOT_EXIST"));
 
 if (!loan.getStatus().equals(LoanStatus.PENDING)) {
 
  throw new MortgageException("Service_LOAN_CANNOT_UPDATE");
 
 }
 if (estimatedValue < loan.getRequiredAmount()) {
 
  throw new MortgageException("Serive_LOAN_CANNOT_INITIATE");
 
 } else {
 
  Double principalAmount = loan.getRequiredAmount();
 
  double monthlyInterestRate = INTEREST_RATE / 12 / 100;
 
  int totalMonths = loan.getLoanTenure();
 
  double EMI = Math
 
   .round(principalAmount * monthlyInterestRate * Math.pow(1 + monthlyInterestRate, totalMonths));
 
  List<Loan> loanList = loanRepository.findLoanByCustomerPanNumber(loan.getCustomer().getPanNumber());
 
  if (loanList.size() > 1) {
 
  Double sum = 0.0;
 
  for (Loan l : loanList) {
 
   sum += l.getEmi();
  }
 
  if (loan.getCustomer().getMonthlyIncome() - sum > EMI) {
 
   loan.setStatus(LoanStatus.APPROVED);
 
   loan.setLoanAmount(principalAmount);
 
   loan.setEmi(EMI);
 
  } else {
 
   loan.setStatus(LoanStatus.REJECTED);
 
  }
 
  } else {
 
  if (loan.getCustomer().getMonthlyIncome() > EMI) {
 
   loan.setStatus(LoanStatus.APPROVED);
 
   loan.setLoanAmount(principalAmount);
 
   loan.setEmi(EMI);
  } else {
 
   loan.setStatus(LoanStatus.REJECTED);
 
  }
 
  }
  if (loan.getStatus().equals(LoanStatus.REJECTED)) {
 
  throw new MortgageException("Service_LOAN_REJECTED");
 
  } else {
 
  Loan savedLoan = loanRepository.save(loan);
 
  return savedLoan;
 
  }
 
 }
 
 }
 @Override
 
 public String loanApplicationReview(Integer loanId) throws MortgageException {
 String message;
 
 Optional<Loan> optionalLoan = loanRepository.findById(loanId);
 
 Loan loan = optionalLoan.orElseThrow(() -> new MortgageException("Service_LOAN_DOES_NOT_EXIST"));
 if (loan.getStatus() != LoanStatus.PENDING) {
 
  throw new MortgageException("Service_LOAN_CANNOT_UPDATE");
 
 }
 
 if (loan.getCustomer().getcreditScore() >= 650) {
 
  message = " Your application has been considered for loan processing";
 
 } else if (loan.getCustomer().getcreditScore() > 500 && loan.getCustomer().getcreditScore() < 650) {
 
  message = "You are having low credit score for the loan, kindly contact the bank manager !";
 
 } else {
 
  loan.setStatus(LoanStatus.REJECTED);
 
  throw new MortgageException("Service_LOAN_REJECTED");
 
 }
 
 return message;
 
 }
}
 
------------------------------
MortageManagementController(API)

package com.infosys.mortgage.api;
import java.util.List;
import javax.validation.Valid;
 
import javax.validation.constraints.Min;
 
import javax.validation.constraints.Pattern;
import org.springframework.beans.factory.annotation.Autowired;
 
import org.springframework.http.HttpStatus;
 
import org.springframework.http.ResponseEntity;
 
import org.springframework.validation.annotation.Validated;
 
import org.springframework.web.bind.annotation.GetMapping;
 
import org.springframework.web.bind.annotation.PathVariable;
 
import org.springframework.web.bind.annotation.PostMapping;
 
import org.springframework.web.bind.annotation.PutMapping;
 
import org.springframework.web.bind.annotation.RequestBody;
 
import org.springframework.web.bind.annotation.RequestMapping;
 
import org.springframework.web.bind.annotation.RequestParam;
 
import org.springframework.web.bind.annotation.RestController;
import com.infosys.mortgage.dto.CustomerDTO;
 
import com.infosys.mortgage.dto.LoanDTO;
 
import com.infosys.mortgage.entity.Loan;
 
import com.infosys.mortgage.exception.MortgageException;
 
import com.infosys.mortgage.service.CustomerService;
 
import com.infosys.mortgage.service.LoanApplicationService;
@RestController
 
@RequestMapping(value = "/loan")
 
@Validated
 
public class MortgageManagementController {
 @Autowired
 
 private CustomerService customerService;
 @Autowired
 
 private LoanApplicationService loanApplicationService;
 
 @PostMapping(value="/register")
 
 public ResponseEntity<String>customerRegistration( @Valid @RequestBody CustomerDTO customerDTO){
 
 String panNumber = customerService.customerRegistration(customerDTO);
 
 return new ResponseEntity<>("Customer has been registered successfully with customer id :" + panNumber, HttpStatus.CREATED);
 
 }
 
 @GetMapping(value="/{id}")
 
 public ResponseEntity<List<LoanDTO>>fetchAllLoansForCustomer(@PathVariable("id") @Valid
 
  @Pattern(regexp="[A-Z]{5}[0-9]{4}[A-Z]{1}",message="{Customer_pan_invalid}") @RequestBody String panNumber) throws MortgageException{
 
 List<LoanDTO>loanDtolist=customerService.fetchAllLoansForCustomer(panNumber);
 
 return new ResponseEntity<>(loanDtolist,HttpStatus.OK);
 
 }
 
 @PostMapping(value="/applyloan")
 
 public ResponseEntity<String>applyLoan( @Valid @RequestBody LoanDTO loanDTO) throws MortgageException{
 
 Integer loanId=loanApplicationService.applyLoan(loanDTO);
 
 return new ResponseEntity<>("You have successfully applied for Mortagage with loan Id : "
 
  + loanId, HttpStatus.CREATED);
 
 }
 
 @PutMapping(value="/{loanId}")
 
 public ResponseEntity<String>loanApplicationReview(@Min(value=1, message="{Loan_loanId_invalid}") @PathVariable("loanId") Integer loanId)
 
 throws MortgageException{
 
 String message = loanApplicationService.loanApplicationReview(loanId);
 
 return new ResponseEntity<>(message,HttpStatus.OK);
 
 }
 
 @PutMapping(value="/evaluation")
 
 public ResponseEntity<Loan>loanEvaluation(@Min(value=1, message="{Loan_loanId_invalid}") @RequestParam Integer loanId,
 
  @RequestParam Double estimatedValue)throws MortgageException{
 
 Loan loan = loanApplicationService.loanEvaluation(loanId, estimatedValue);
 
 return new ResponseEntity<>(loan,HttpStatus.OK);
 
 }
 
}

-----------------------------
ExceptionControll
package com.infosys.mortgage.utility;
import java.util.stream.Collectors;
import org.springframework.beans.factory.annotation.Autowired;
 
import org.springframework.core.env.Environment;
 
import org.springframework.http.HttpStatus;
 
import org.springframework.http.ResponseEntity;
 
import org.springframework.web.bind.MethodArgumentNotValidException;
 
import org.springframework.web.bind.annotation.ExceptionHandler;
 
import org.springframework.web.bind.annotation.RestControllerAdvice;
import com.infosys.mortgage.exception.MortgageException;
import javax.validation.ConstraintViolationException;
@RestControllerAdvice
 
public class ExceptionController {
 @Autowired
 
 private Environment environment;
 @ExceptionHandler(Exception.class)
 
 public ResponseEntity<ErrorInfo> generalExceptionHandler(Exception ex) {
 ErrorInfo errorInfo = new ErrorInfo();
 
 errorInfo.setErrorCode(HttpStatus.INTERNAL_SERVER_ERROR.value());
 
 errorInfo.setErrorMsg(ex.getMessage());
 return new ResponseEntity<>(errorInfo, HttpStatus.INTERNAL_SERVER_ERROR);
 
 }
 @ExceptionHandler(MortgageException.class)
 
 public ResponseEntity<ErrorInfo> MortgageExceptionHandler(MortgageException ex) {
 ErrorInfo errorInfo = new ErrorInfo();
 
 errorInfo.setErrorCode(HttpStatus.BAD_REQUEST.value());
 
 System.out.println(environment.getProperty(ex.getMessage()));
 
 errorInfo.setErrorMsg(environment.getProperty(ex.getMessage()));
 return new ResponseEntity<>(errorInfo, HttpStatus.BAD_REQUEST);
 
 }
 @ExceptionHandler({ MethodArgumentNotValidException.class, ConstraintViolationException.class })
 
 public ResponseEntity<ErrorInfo> exceptionHandler(Exception ex) {
 String errorMsg;
 if (ex instanceof MethodArgumentNotValidException) {
 
  MethodArgumentNotValidException manve = (MethodArgumentNotValidException) ex;
 
  errorMsg = manve.getBindingResult().getAllErrors().stream().map(x -> x.getDefaultMessage())
 
   .collect(Collectors.joining(", "));
 
 } else {
 
  ConstraintViolationException cve = (ConstraintViolationException) ex;
  errorMsg = cve.getConstraintViolations().stream().map(x -> x.getMessage())
 
   .collect(Collectors.joining(", "));
 
 }
 ErrorInfo errorInfo = new ErrorInfo();
 
 errorInfo.setErrorCode(HttpStatus.BAD_REQUEST.value());
 
 errorInfo.setErrorMsg(errorMsg);
 return new ResponseEntity<>(errorInfo, HttpStatus.BAD_REQUEST);
 
 }
 
}
 
----------------------
ApplicationProperties
spring.datasource.url= jdbc:mysql://localhost:3306/mortgage
 
spring.datasource.username=root
 
spring.datasource.password=root
 
server.port=2525
 
server.servlet.context-path=/mortgage
