controller API :-
----------
import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.env.Environment;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.infy.dto.EmployeeDTO;
import com.infy.exception.InfyLaptopServiceException;
import com.infy.service.InfyLaptopService;
import jakarta.validation.Valid;
import jakarta.validation.constraints.Min;
import jakarta.validation.constraints.NotNull;
@RestController
@RequestMapping
@Validated
public class InfyLaptopAPI {
 @Autowired
 private InfyLaptopService infyLaptopService;
 @PostMapping(value ="/employee")
 public ResponseEntity<EmployeeDTO>addNewEmp(@RequestBody @Valid EmployeeDTO employeeDto)
  throws InfyLaptopServiceException{
 Integer empId = infyLaptopService.addNewEmp(employeeDto);
 employeeDto.setEmpId(empId);
 return new ResponseEntity<EmployeeDTO>(employeeDto, HttpStatus.CREATED);
 }
 @PostMapping(value="/laptopAllocation")
 public String addLaptopAllocation(@RequestParam @NotNull(message="{employee.id.notpresent}")
  @Min(value=1, message="{employee.id.invalid}")
 Integer empId)throws InfyLaptopServiceException{
 String message = infyLaptopService.addLaptopAllocation(empId);
 return message;
 }
 @GetMapping(value="/laptopAllocation/{empId}")
 public EmployeeDTO getLaptopAllocation(@PathVariable @NotNull(message="{employee.id.notpresent}")
     @Min(value=1, message="{employee.id.invalid}")
     Integer empId)throws InfyLaptopServiceException{
 EmployeeDTO employeeDto= infyLaptopService.getLaptopAllocation(empId);
 return employeeDto;
 }
 @PutMapping(value="/laptopAllocation")
 public String extendLaptopAllocation(@RequestParam @NotNull(message="{employee.id.notpresent}")
               @Min(value=1, message="{employee.id.invalid}")
               Integer empId)throws InfyLaptopServiceException{
 String message = infyLaptopService.extendLaptopAllocation(empId);
 return message;
 }
}
==========================================================================================
DTO Classes - Employee DTO
import java.time.LocalDate;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.Max;
import jakarta.validation.constraints.Min;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.PastOrPresent;
import jakarta.validation.constraints.Pattern;
@JsonInclude(Include.NON_EMPTY)
public class EmployeeDTO {
 private int empId;
 @NotBlank(message = "{employee.name.notpresent}")
 @Pattern(regexp = "(?=.*[a-zA-Z].*)[a-zA-Z]*", message="{employee.name.invalid}")
 private String empName;
 @NotBlank(message ="{employee.email.notpresent}")
 @Email(message = "{employee.email.invalid}")
 private String emailId;
 @Min(value = 7000000000l, message ="{employee.contactno.invalid}")
 @Max(value = 9999999999l, message = "{employee.contactno.invalid}")
 private long contactNo;
 @NotNull(message = "{employee.joiningdate.notpresent}")
 @PastOrPresent(message = "{employee.joiningdate.invalid}")
 private LocalDate joiningDate;
 @NotNull(message = "{employee.mappedtoproject.notpresent}")
 @Pattern(regexp ="[YN]{1}", message="{employee.mappedtoproject.invalid}")
  private String mappedToProject;
  private LaptopDTO laptop;
  private LocalDate laptopAllocatedTill;
  private String message;
 public int getEmpId() {
 return empId;
 }
 public void setEmpId(int empId) {
 this.empId = empId;
 }
 public String getEmpName() {
 return empName;
 }
 public void setEmpName(String empName) {
 this.empName = empName;
 }
 public String getEmailId() {
 return emailId;
 }
 public void setEmailId(String emailId) {
 this.emailId = emailId;
 }
 public long getContactNo() {
 return contactNo;
 }
 public void setContactNo(long contactNo) {
 this.contactNo = contactNo;
 }
 public LocalDate getJoiningDate() {
 return joiningDate;
 }
 public void setJoiningDate(LocalDate joiningDate) {
 this.joiningDate = joiningDate;
 }
 public String getMappedToProject() {
 return mappedToProject;
 }
 public void setMappedToProject(String mappedToProject) {
 this.mappedToProject = mappedToProject;
 }
 public LaptopDTO getLaptop() {
 return laptop;
 }
 public void setLaptop(LaptopDTO laptop) {
 this.laptop = laptop;
 }
 public LocalDate getLaptopAllocatedTill() {
 return laptopAllocatedTill;
 }
 public void setLaptopAllocatedTill(LocalDate laptopAllocatedTill) {
 this.laptopAllocatedTill = laptopAllocatedTill;
 }
 public String getMessage() {
 return message;
 }
 public void setMessage(String message) {
 this.message = message;
 }
}
==========================================================================================
ServiceIMPL Class:
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.env.Environment;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import com.infy.exception.InfyLaptopServiceException;
import com.infy.repository.InfyEmployeeRepo;
import com.infy.repository.InfyLaptopRepo;
import jakarta.validation.Valid;
import jakarta.validation.constraints.Min;
import jakarta.validation.constraints.NotNull;
import com.infy.entity.Customer;
import com.infy.entity.EmployeeEntity;
import com.infy.entity.LaptopEntity;
import com.infy.dto.EmployeeDTO;
import com.infy.dto.LaptopDTO;
@Service
@Transactional
public class InfyLaptopServiceImpl implements InfyLaptopService {
 @Autowired
 private InfyEmployeeRepo infyEmployeeRepo;
 @Autowired
 private InfyLaptopRepo infyLaptopRepo;
 @Autowired
 private Environment environment;
 private static final String EMP_NOT_FOUND="INFYLAPTOPSERVICEIMPL.EMP_NOT_FOUND*";
 // Implement this method as per the instructions given in Question paper.
 @Override
 public Integer addNewEmp(EmployeeDTO employeeDto) throws InfyLaptopServiceException{
   EmployeeEntity employee = infyEmployeeRepo.findByEmailId(employeeDto.getEmpId());
   if(employee!=null) {
   throw new InfyLaptopServiceException("INFYLAPTOPSERVICEIMPL.EMAILID_ALREADY_PRESENT");
   }
   EmployeeEntity emp = new EmployeeEntity();
   emp.setContactNo(employeeDto.getContactNo());
   emp.setEmailId(employeeDto.getEmailId());
   emp.setEmpId(employeeDto.getEmpId());
   emp.setEmpName(employeeDto.getEmpName());
   emp.setJoiningDate(employeeDto.getJoiningDate());
   emp.setLaptopAllocatedTill(employeeDto.getLaptopAllocatedTill());
   emp.setMappedToProject(employeeDto.getMappedToProject());
   LaptopEntity l = new LaptopEntity();
   LaptopDTO ld = employeeDto.getLaptop();
   l.setAllocated(ld.getAllocated());
   l.setMachineName(ld.getMachineName());
   l.setMake(ld.getMake());
   emp.setLaptopEntity(l);
 return infyEmployeeRepo.save(emp).getEmpId();
 }
==========================================================================================
ExceptionController:
import java.lang.System.Logger;
import java.time.LocalDateTime;
import java.util.stream.Collectors;
import org.antlr.v4.runtime.atn.ErrorInfo;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.env.Environment;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.RestControllerAdvice;
import com.infy.exception.InfyLaptopServiceException;
import jakarta.validation.ConstraintViolationException;
@RestControllerAdvice
public class ExceptionController {
 @Autowired
 private Logger logger;
 @Autowired
 private Environment environment;
 @ExceptionHandler(Exception.class)
 public ResponseEntity<ErrorInfo>generalExceptionHandler(Exception ex){
 logger.error(ex.getMessage(),ex);
 ErrorInfo errorInfo=new ErrorInfo();
 errorInfo.setErrorCode(HttpStatus.INTERNAL_SERVER_ERROR.value());
 errorInfo.setErrorMsg(environment.getProperty("GENERAL.EXCEPTION_MSG"));
 return new ResponseEntity<>(errorInfo, HttpStatus.INTERNAL_SERVER_ERROR);
 }
 @ExceptionHandler(InfyLaptopServiceException.class)
 public ResponseEntity<ErrorInfo> infyLaptopServiceExceptionHandler(InfyLaptopServiceException ex){
 logger.error(ex.getMessage(),ex);
 ErrorInfo errorInfo = new ErrorInfo();
 errorInfo.setErrorCode(HttpStatus.BAD_REQUEST.value());
 errorInfo.setErrorMsg(environment.getProperty(ex.getMessage()));
 return new ResponseEntity<>(errorInfo, HttpStatus.BAD_REQUEST);
 }
 @ExceptionHandler({MethodArgumentNotValidException.class, ConstraintViolationException.class})
 public ResponseEntity<ErrorInfo>exceptionHandler (Exception ex){
 Logger.error(ex.getMessage(), ex);
 String errorMsg;
 if(ex instanceof MethodArgumentNotValidException) {
  MethodArgumentNotValidException manve = (MethodArgumentNotValidException) ex;
  errorMsg = manve.getBindingResult().getAllErrors().stream().map(x -> x.getDefaultMessage())
   .collect(Collectors.joining(", "));
 }
 else {
  ConstraintViolationException cve = (ConstraintViolationException) ex;
  errorMsg = cve.getConstraintViolations().stream().map(x -> x.getMessage())
   .collect(Collectors.joining(","));
 }
 ErrorInfo errorInfo = new ErrorInfo();
 errorInfo.setErrorCode(HttpStatus.BAD_REQUEST.value());
 errorInfo.setErrorMsg(errorMsg);
 return new ResponseEntity<>(errorInfo, HttpStatus.BAD_REQUEST);
 }
}
========================================================================================
application.properties:
server.port=2222
server.servlet.context-path=/InfyLaptopService
spring.datasource.url=jdbc:mysql://localhost:3306/db_infylaptopservice
spring.datasource.username=root
spring.datasource.password=root
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5Dial
spring.jackson.parser.allow-comments= true
